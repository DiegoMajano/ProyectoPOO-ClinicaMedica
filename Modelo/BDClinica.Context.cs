//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClinicaMedica.Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClinicaEntities : DbContext
    {
        public ClinicaEntities()
            : base("name=ClinicaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<citasMedicas> citasMedicas { get; set; }
        public virtual DbSet<pacientes> pacientes { get; set; }
        public virtual DbSet<recetas> recetas { get; set; }
        public virtual DbSet<reportes> reportes { get; set; }
        public virtual DbSet<medicos> medicos { get; set; }
        public virtual DbSet<medicamentos> medicamentos { get; set; }
        public virtual DbSet<signosVitales> signosVitales { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
    
        public virtual int IngresarCita(string codP, string codM, Nullable<System.DateTime> fechaH)
        {
            var codPParameter = codP != null ?
                new ObjectParameter("codP", codP) :
                new ObjectParameter("codP", typeof(string));
    
            var codMParameter = codM != null ?
                new ObjectParameter("codM", codM) :
                new ObjectParameter("codM", typeof(string));
    
            var fechaHParameter = fechaH.HasValue ?
                new ObjectParameter("fechaH", fechaH) :
                new ObjectParameter("fechaH", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarCita", codPParameter, codMParameter, fechaHParameter);
        }
    
        public virtual int InscribirPaciente(string pnom, string snom, string pape, string sape, string dir, string tel, string sex, Nullable<System.DateTime> fecha, string dui, string nit)
        {
            var pnomParameter = pnom != null ?
                new ObjectParameter("pnom", pnom) :
                new ObjectParameter("pnom", typeof(string));
    
            var snomParameter = snom != null ?
                new ObjectParameter("snom", snom) :
                new ObjectParameter("snom", typeof(string));
    
            var papeParameter = pape != null ?
                new ObjectParameter("pape", pape) :
                new ObjectParameter("pape", typeof(string));
    
            var sapeParameter = sape != null ?
                new ObjectParameter("sape", sape) :
                new ObjectParameter("sape", typeof(string));
    
            var dirParameter = dir != null ?
                new ObjectParameter("dir", dir) :
                new ObjectParameter("dir", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var duiParameter = dui != null ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("nit", nit) :
                new ObjectParameter("nit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InscribirPaciente", pnomParameter, snomParameter, papeParameter, sapeParameter, dirParameter, telParameter, sexParameter, fechaParameter, duiParameter, nitParameter);
        }
    
        public virtual int AgregarMedicamento(string codR, string nom, string indi)
        {
            var codRParameter = codR != null ?
                new ObjectParameter("codR", codR) :
                new ObjectParameter("codR", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var indiParameter = indi != null ?
                new ObjectParameter("indi", indi) :
                new ObjectParameter("indi", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarMedicamento", codRParameter, nomParameter, indiParameter);
        }
    
        public virtual int CrearReceta(string codRe, Nullable<System.DateTime> fecha)
        {
            var codReParameter = codRe != null ?
                new ObjectParameter("codRe", codRe) :
                new ObjectParameter("codRe", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearReceta", codReParameter, fechaParameter);
        }
    
        public virtual int CrearReporte(string codcita, string mot, string diag, Nullable<decimal> peso, Nullable<decimal> tal, Nullable<decimal> temp, string presi)
        {
            var codcitaParameter = codcita != null ?
                new ObjectParameter("codcita", codcita) :
                new ObjectParameter("codcita", typeof(string));
    
            var motParameter = mot != null ?
                new ObjectParameter("mot", mot) :
                new ObjectParameter("mot", typeof(string));
    
            var diagParameter = diag != null ?
                new ObjectParameter("diag", diag) :
                new ObjectParameter("diag", typeof(string));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("peso", peso) :
                new ObjectParameter("peso", typeof(decimal));
    
            var talParameter = tal.HasValue ?
                new ObjectParameter("tal", tal) :
                new ObjectParameter("tal", typeof(decimal));
    
            var tempParameter = temp.HasValue ?
                new ObjectParameter("temp", temp) :
                new ObjectParameter("temp", typeof(decimal));
    
            var presiParameter = presi != null ?
                new ObjectParameter("presi", presi) :
                new ObjectParameter("presi", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CrearReporte", codcitaParameter, motParameter, diagParameter, pesoParameter, talParameter, tempParameter, presiParameter);
        }
    
        public virtual int InscribirMedico(string pnom, string pape, string tel, string esp)
        {
            var pnomParameter = pnom != null ?
                new ObjectParameter("pnom", pnom) :
                new ObjectParameter("pnom", typeof(string));
    
            var papeParameter = pape != null ?
                new ObjectParameter("pape", pape) :
                new ObjectParameter("pape", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("tel", tel) :
                new ObjectParameter("tel", typeof(string));
    
            var espParameter = esp != null ?
                new ObjectParameter("esp", esp) :
                new ObjectParameter("esp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InscribirMedico", pnomParameter, papeParameter, telParameter, espParameter);
        }
    }
}
